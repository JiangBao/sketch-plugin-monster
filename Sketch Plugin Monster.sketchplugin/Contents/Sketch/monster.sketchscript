@import 'lib/utils.js';
@import 'lib/PluginHandler.js';
@import 'lib/MochaJSDelegate.js';
@import 'lib/Panel.js';
@import 'lib/keyCodePresets.js';

var pluginHandler = new PluginHandler();

function manageShortcuts(context) {
  var i18n = utils.system.getI18n(context);
  var panel = new Panel({
    context: context,
    template: 'shortcuts'
  }, {
    i18n: i18n.webview,
    shortcuts: pluginHandler.getCommandsOfAllPlugins(),
    keyCodes: keyCodePresets,
    sketchShortcuts: i18n.sketchShortcuts,
    i18nCommands: i18n.commands
  }, function (type, data) {
    switch (type) {
      case '$pluginShortcut:set':
        pluginHandler.setShortcutForPlugin(data.plugin, {
          identifier: data.identifier,
          shortcut: data.shortcut
        });
        break;
      case '$pluginShortcut:clear':
        pluginHandler.setShortcutForPlugin(data.plugin, {
          identifier: data.identifier
        });
        break;
      case '$pluginMonster:checkForUpdates':
        checkForUpdates(context);
        break;
      case '$pluginMonster:linkFeedback':
        linkFeedback();
        break;
      default:
    }
  });

  panel.show();
}

function initialize(context) {
  var manifestPath = pluginHandler.getManifestPathOfPlugin(context.plugin.name());
  var i18n = utils.system.getI18n(context);
  var manifest = pluginHandler.getManifestOfPlugin(context.plugin.name());

  utils.array.forEach(manifest.commands, function (command, i) {
    var i18nStr = i18n.commands[command.identifier];
    if (i18nStr) {
      manifest.commands[i].name = i18nStr;
    }
  });

  utils.fs.writeFile(manifestPath, utils.JSON.stringify(manifest));

  // check for updates automatically
  checkForUpdates(context, true);
}

function checkForUpdates(context, isAutomatically) {
  var checkUrl = NSURL.URLWithString(encodeURI([
                  'https://raw.githubusercontent.com',
                  'PeachScript',
                  'sketch-plugin-monster',
                  'master',
                  'Sketch Plugin Monster.sketchplugin/Contents/Sketch',
                  'manifest.json'].join('/')));
  var updateUrl = NSURL.URLWithString(encodeURI([
                  'https://github.com',
                  'PeachScript',
                  'sketch-plugin-monster',
                  'releases'].join('/')));
  var packageJSON = utils.JSON.parse(NSString.stringWithContentsOfURL_encoding_error(checkUrl, 0, nil));
  var currentVersion = context.plugin.version();
  var updateAvailable = utils.system.againstVersion(packageJSON.version, currentVersion);
  var promptWindow = COSAlertWindow.new();
  var i18n = utils.system.getI18n(context);

  promptWindow.setMessageText('Sketch Plugin Monster');

  if (updateAvailable) {
    promptWindow.setInformativeText(i18n.checkForUpdates.available
                                        .replace('${ latestVersion }', packageJSON.version)
                                        .replace('${ currentVersion }', currentVersion));
    promptWindow.addButtonWithTitle(i18n.checkForUpdates.btnDownload);
    promptWindow.addButtonWithTitle(i18n.checkForUpdates.btnLater);
  } else {
    promptWindow.setInformativeText(i18n.checkForUpdates.unavailable);
    promptWindow.addButtonWithTitle(i18n.checkForUpdates.btnDone);
  }

  if (updateAvailable) {
    if (promptWindow.runModal() == "1000") {
      NSWorkspace.sharedWorkspace().openURL(updateUrl);
    }
  } else if (!isAutomatically) {
    promptWindow.runModal()
  }
}

function exportShortcuts(context) {
  var original = pluginHandler.getCommandsOfAllPlugins();
  var i18n = utils.system.getI18n(context);
  var parsedConf = original.map(function (plugin) {
    return {
      name: plugin.name,
      identifier: plugin.identifier,
      commands: plugin.commands.reduce(function (result, command) {
        if (command.shortcut) {
          result[command.identifier] = command.shortcut;
        }

        return result;
      }, {})
    };
  });

  utils.system.saveFileWithPanel({
    title: i18n.exportAndImport.exportTitle,
    defaultFileName: 'plugin_monster_export',
    types: ['json']
  }, utils.JSON.stringify(parsedConf), function () {
    context.document.showMessage(i18n.exportAndImport.exportSuccess);
  });
}

function importShortcuts(context) {
  var i18n = utils.system.getI18n(context);

  utils.system.openFileWithPanel({
    types: ['json']
  }, function (path) {
    var importConf;
    var importResult;
    var promptWindow;

    try {
      importConf = utils.JSON.parse(utils.fs.readFile(path));
    } catch (e) {
      context.document.showMessage(i18n.exportAndImport.importReadError);
      throw new Error(i18n.exportAndImport.importReadError);
    }

    if (importConf[0] && importConf[0].name && importConf[0].commands) {
      importResult = pluginHandler.restoreShortcutsFromConfig(importConf);
      if (importResult.length) {
        promptWindow = COSAlertWindow.new();
        promptWindow.setMessageText('Sketch Plugin Monster');
        promptWindow.setInformativeText(i18n.exportAndImport.importPartOfShortcuts +
                                         importResult.map(function (item, index) {
                                           return ['  ', index + 1, '.', ' ', item].join('');
                                         }).join('\n'));
        promptWindow.addButtonWithTitle(i18n.exportAndImport.btnKnow);
        promptWindow.runModal();
      } else {
        context.document.showMessage(i18n.exportAndImport.importSuccess);
      }
    } else {
      context.document.showMessage(i18n.exportAndImport.importReadError);
    }
  });
}

function linkFeedback() {
  utils.system.openLink('https://github.com/PeachScript/sketch-plugin-monster/issues/new');
}
