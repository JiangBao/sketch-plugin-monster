@import 'lib/utils.js';
@import 'lib/PluginHandler.js';
@import 'lib/MochaJSDelegate.js';
@import 'lib/Panel.js';
@import 'lib/keyCodePresets.js';

var pluginHandler = new PluginHandler();

function manageShortcuts(context) {
  var i18n = utils.system.getI18n(context);
  var panel = new Panel({
    context: context,
    template: 'shortcuts'
  }, {
    i18n: i18n.webview,
    shortcuts: pluginHandler.getCommandsOfAllPlugins(),
    keyCodes: keyCodePresets,
    sketchShortcuts: i18n.sketchShortcuts
  }, function (type, data) {
    switch (type) {
      case '$pluginShortcut:set':
        pluginHandler.setShortcutForPlugin(data.plugin, {
          identifier: data.identifier,
          shortcut: data.shortcut
        });
        break;
      case '$pluginShortcut:clear':
        pluginHandler.setShortcutForPlugin(data.plugin, {
          identifier: data.identifier
        });
        break;
      default:
    }
  });

  panel.show();
}

function initialize(context) {
  var manifestPath = pluginHandler.getManifestPathOfPlugin(context.plugin.name());
  var i18n = utils.system.getI18n(context);
  var manifest = pluginHandler.getManifestOfPlugin(context.plugin.name());

  utils.array.forEach(manifest.commands, function (command, i) {
    var i18nStr = i18n.commands[command.identifier];
    if (i18nStr) {
      manifest.commands[i].name = i18nStr;
    }
  });

  utils.fs.writeFile(manifestPath, utils.JSON.stringify(manifest));
}

function checkForUpdates(context) {
  var checkUrl = NSURL.URLWithString(encodeURI([
                  'https://raw.githubusercontent.com',
                  'PeachScript',
                  'sketch-plugin-monster',
                  'master',
                  'Sketch Plugin Monster.sketchplugin/Contents/Sketch',
                  'manifest.json'].join('/')));
  var updateUrl = NSURL.URLWithString(encodeURI([
                  'https://github.com',
                  'PeachScript',
                  'sketch-plugin-monster',
                  'releases'].join('/')));
  var packageJSON = utils.JSON.parse(NSString.stringWithContentsOfURL_encoding_error(checkUrl, 0, nil));
  var currentVersion = context.plugin.version();
  var updateAvailable = utils.system.againstVersion(packageJSON.version, currentVersion);
  var promptWindow = COSAlertWindow.new();
  var i18n = utils.system.getI18n(context);

  promptWindow.setMessageText('Sketch Plugin Monster');

  if (updateAvailable) {
    promptWindow.setInformativeText(i18n.checkForUpdates.available
                                        .replace('${ latestVersion }', packageJSON.version)
                                        .replace('${ currentVersion }', currentVersion));
    promptWindow.addButtonWithTitle(i18n.checkForUpdates.btnDownload);
    promptWindow.addButtonWithTitle(i18n.checkForUpdates.btnLater);
  } else {
    promptWindow.setInformativeText(i18n.checkForUpdates.unavailable);
    promptWindow.addButtonWithTitle(i18n.checkForUpdates.btnDone);
  }

  if (promptWindow.runModal() == "1000" && updateAvailable) {
    NSWorkspace.sharedWorkspace().openURL(updateUrl);
  }
}
